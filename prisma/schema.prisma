// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PREPARING
  DELIVERED
  READY
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}

model User {
  id        String      @id @default(cuid())
  email     String      @unique
  password  String
  name      String
  phone     String
  location  String
  status    UserStatus  @default(ACTIVE)
  role      Role        @relation(fields: [roleId], references: [id])
  roleId    String
  Orders    Order[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Resturant Resturant[]
}

model Role {
  id          String             @id @default(cuid())
  resturant   Resturant          @relation(fields: [resturantId], references: [id])
  resturantId String
  name        String             @unique
  status      RoleStatus         @default(ACTIVE)
  permissions RoleOnPermission[]
  users       User[]
}

model Permission {
  id      String             @id @default(cuid())
  action  String
  subject String
  roles   RoleOnPermission[]
}

model RoleOnPermission {
  id String @id @default(cuid())

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Resturant {
  id           String    @id @default(cuid())
  superAdmin   User      @relation(fields: [superAdminId], references: [id])
  superAdminId String
  name         String
  location     String
  phone        String
  email        String
  logoUrl      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Pizza        Pizza[]
  Topping      Topping[]
  Role         Role[]
}

model Pizza {
  id           String         @id @default(cuid())
  name         String
  price        Float
  photoUrl     String
  resturant    Resturant      @relation(fields: [resturantId], references: [id])
  resturantId  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PizzaTopping PizzaTopping[]
  Order        Order[]
}

model Topping {
  id           Int            @id @default(autoincrement())
  resturant    Resturant      @relation(fields: [resturantId], references: [id])
  resturantId  String
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PizzaTopping PizzaTopping[]
}

model PizzaTopping {
  id        Int      @id @default(autoincrement())
  pizza     Pizza    @relation(fields: [pizzaId], references: [id])
  pizzaId   String
  topping   Topping  @relation(fields: [toppingId], references: [id])
  toppingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  customer   User        @relation(fields: [customerId], references: [id])
  customerId String
  pizza      Pizza       @relation(fields: [pizzaId], references: [id])
  pizzaId    String
  status     OrderStatus @default(PREPARING)
  quantity   Int
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
