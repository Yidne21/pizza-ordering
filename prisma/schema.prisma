// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PREPARING
  DELIVERED
  READY
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum RoleStatus {
  ACTIVE
  INACTIVE
}

enum PermissionType {
  SYSTEM
  RESTURANT
}

enum UserType {
  SYSTEM
  RESTURANT
}

enum RoleType {
  SYSTEM
  RESTURANT
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  password    String
  name        String?
  phone       String
  location    String
  status      UserStatus @default(ACTIVE)
  type        UserType   @default(SYSTEM)
  role        Role      @relation(fields: [roleId], references: [id])
  roleId      String
  resturant   Resturant? @relation(fields: [resturantId], references: [id])
  resturantId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Orders      Order[]
}

model Role {
  id          String             @id @default(cuid())
  name        String             
  status      RoleStatus         @default(ACTIVE)
  resturant   Resturant?         @relation(fields: [resturantId], references: [id], onDelete: Cascade)
  resturantId String?
  type        RoleType           @default(SYSTEM)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  permissions RoleOnPermission[]
  users       User[]
}

model Permission {
  id      String             @id @default(cuid())
  action  String
  subject String
  type    PermissionType     @default(SYSTEM)
  roles   RoleOnPermission[]
}

model RoleOnPermission {
  id String @id @default(cuid())

  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

model Resturant {
  id        String   @id @default(cuid())
  name      String
  location  String
  phone     String
  email     String
  logoUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Pizza     Pizza[]
  User      User[]
  Role      Role[]
}

model Pizza {
  id           String         @id @default(cuid())
  name         String
  price        Float
  photoUrl     String
  resturant    Resturant      @relation(fields: [resturantId], references: [id])
  resturantId  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PizzaTopping PizzaTopping[]
  Order        Order[]
}

model Topping {
  id           String         @id @default(cuid())
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PizzaTopping PizzaTopping[]
  OrderTopping OrderTopping[]
}

model PizzaTopping {
  id        String   @id @default(cuid()) @unique
  pizza     Pizza    @relation(fields: [pizzaId], references: [id])
  pizzaId   String
  topping   Topping  @relation(fields: [toppingId], references: [id])
  toppingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String         @id @default(cuid())
  customer     User           @relation(fields: [customerId], references: [id])
  customerId   String
  pizza        Pizza          @relation(fields: [pizzaId], references: [id])
  pizzaId      String
  status       OrderStatus    @default(PREPARING)
  quantity     Int
  total        Float
  OrderTopping OrderTopping[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model OrderTopping {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  topping   Topping  @relation(fields: [toppingId], references: [id])
  toppingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
